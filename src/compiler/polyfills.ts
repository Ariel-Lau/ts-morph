// DO NOT EDIT - This file is automatically generated by createNodePolyfills.ts
// This file is necessary because old supported versions of the compiler won't have these nodes.
import * as ts from "typescript";

export interface JsxClosingFragmentCompilerPolyfill extends ts.Expression {
    parent?: JsxFragmentCompilerPolyfill;
}

export interface JsxFragmentCompilerPolyfill extends ts.PrimaryExpression {
    openingFragment: JsxOpeningFragmentCompilerPolyfill;
    children: ts.NodeArray<ts.JsxChild>;
    closingFragment: JsxClosingFragmentCompilerPolyfill;
}

export interface JsxOpeningFragmentCompilerPolyfill extends ts.Expression {
    parent?: JsxFragmentCompilerPolyfill;
}

export enum ScriptElementKind {
    unknown = "",
    warning = "warning",
    /**
     * predefined type (void) or keyword (class)
     */
    keyword = "keyword",
    /**
     * top level script node
     */
    scriptElement = "script",
    /**
     * module foo {}
     */
    moduleElement = "module",
    /**
     * class X {}
     */
    classElement = "class",
    /**
     * var x = class X {}
     */
    localClassElement = "local class",
    /**
     * interface Y {}
     */
    interfaceElement = "interface",
    /**
     * type T = ...
     */
    typeElement = "type",
    /**
     * enum E
     */
    enumElement = "enum",
    enumMemberElement = "enum member",
    /**
     * Inside module and script only
     * const v = ..
     */
    variableElement = "var",
    /**
     * Inside function
     */
    localVariableElement = "local var",
    /**
     * Inside module and script only
     * function f() { }
     */
    functionElement = "function",
    /**
     * Inside function
     */
    localFunctionElement = "local function",
    /**
     * foo() {} }
     */
    memberFunctionElement = "method",
    /**
     * [get|set] foo:number; }
     */
    memberGetAccessorElement = "getter",
    memberSetAccessorElement = "setter",
    /**
     * class X { [public|private]* foo:number; }
     * interface Y { foo:number; }
     */
    memberVariableElement = "property",
    /**
     * class X { constructor() { } }
     */
    constructorImplementationElement = "constructor",
    /**
     * interface Y { ():number; }
     */
    callSignatureElement = "call",
    /**
     * interface Y { []:number; }
     */
    indexSignatureElement = "index",
    /**
     * interface Y { new():Y; }
     */
    constructSignatureElement = "construct",
    /**
     * Y*: string)
     */
    parameterElement = "parameter",
    typeParameterElement = "type parameter",
    primitiveType = "primitive type",
    label = "label",
    alias = "alias",
    constElement = "const",
    letElement = "let",
    directory = "directory",
    externalModuleName = "external module name",
    /**
     * <JsxTagName attribute1 attribute2={0} />
     */
    jsxAttribute = "JSX attribute"
}
