/* barrel:ignore */
import * as ts from "typescript";
import * as compiler from "./../compiler";

// when changing this, make sure to run `npm run code-generate`.
// that will automatically update all other parts of the application that need to be updated when this changes.

// using an "any" type here because I couldn't figure out a way of getting the typescript compiler to understand this
export const nodeToWrapperMappings: { [key: number]: any } = {
    [ts.SyntaxKind.SourceFile]: compiler.SourceFile,
    [ts.SyntaxKind.ArrayLiteralExpression]: compiler.ArrayLiteralExpression,
    [ts.SyntaxKind.ArrayType]: compiler.ArrayTypeNode,
    [ts.SyntaxKind.ArrowFunction]: compiler.ArrowFunction,
    [ts.SyntaxKind.AsExpression]: compiler.AsExpression,
    [ts.SyntaxKind.AwaitExpression]: compiler.AwaitExpression,
    [ts.SyntaxKind.BinaryExpression]: compiler.BinaryExpression,
    [ts.SyntaxKind.Block]: compiler.Block,
    [ts.SyntaxKind.BreakStatement]: compiler.BreakStatement,
    [ts.SyntaxKind.CallExpression]: compiler.CallExpression,
    [ts.SyntaxKind.CallSignature]: compiler.CallSignatureDeclaration,
    [ts.SyntaxKind.CaseBlock]: compiler.CaseBlock,
    [ts.SyntaxKind.CaseClause]: compiler.CaseClause,
    [ts.SyntaxKind.CatchClause]: compiler.CatchClause,
    [ts.SyntaxKind.ClassDeclaration]: compiler.ClassDeclaration,
    [ts.SyntaxKind.Constructor]: compiler.ConstructorDeclaration,
    [ts.SyntaxKind.ConstructorType]: compiler.ConstructorTypeNode,
    [ts.SyntaxKind.ConstructSignature]: compiler.ConstructSignatureDeclaration,
    [ts.SyntaxKind.ContinueStatement]: compiler.ContinueStatement,
    [ts.SyntaxKind.CommaListExpression]: compiler.CommaListExpression,
    [ts.SyntaxKind.ComputedPropertyName]: compiler.ComputedPropertyName,
    [ts.SyntaxKind.ConditionalExpression]: compiler.ConditionalExpression,
    [ts.SyntaxKind.DebuggerStatement]: compiler.DebuggerStatement,
    [ts.SyntaxKind.Decorator]: compiler.Decorator,
    [ts.SyntaxKind.DefaultClause]: compiler.DefaultClause,
    [ts.SyntaxKind.DeleteExpression]: compiler.DeleteExpression,
    [ts.SyntaxKind.DoStatement]: compiler.DoStatement,
    [ts.SyntaxKind.ElementAccessExpression]: compiler.ElementAccessExpression,
    [ts.SyntaxKind.EmptyStatement]: compiler.EmptyStatement,
    [ts.SyntaxKind.EnumDeclaration]: compiler.EnumDeclaration,
    [ts.SyntaxKind.EnumMember]: compiler.EnumMember,
    [ts.SyntaxKind.ExportAssignment]: compiler.ExportAssignment,
    [ts.SyntaxKind.ExportDeclaration]: compiler.ExportDeclaration,
    [ts.SyntaxKind.ExportSpecifier]: compiler.ExportSpecifier,
    [ts.SyntaxKind.ExpressionWithTypeArguments]: compiler.ExpressionWithTypeArguments,
    [ts.SyntaxKind.ExpressionStatement]: compiler.ExpressionStatement,
    [ts.SyntaxKind.ExternalModuleReference]: compiler.ExternalModuleReference,
    [ts.SyntaxKind.FirstLiteralToken]: compiler.NumericLiteral,
    [ts.SyntaxKind.FirstNode]: compiler.QualifiedName,
    [ts.SyntaxKind.ForInStatement]: compiler.ForInStatement,
    [ts.SyntaxKind.ForOfStatement]: compiler.ForOfStatement,
    [ts.SyntaxKind.ForStatement]: compiler.ForStatement,
    [ts.SyntaxKind.FunctionDeclaration]: compiler.FunctionDeclaration,
    [ts.SyntaxKind.FunctionExpression]: compiler.FunctionExpression,
    [ts.SyntaxKind.FunctionType]: compiler.FunctionTypeNode,
    [ts.SyntaxKind.GetAccessor]: compiler.GetAccessorDeclaration,
    [ts.SyntaxKind.HeritageClause]: compiler.HeritageClause,
    [ts.SyntaxKind.Identifier]: compiler.Identifier,
    [ts.SyntaxKind.IfStatement]: compiler.IfStatement,
    [ts.SyntaxKind.ImportDeclaration]: compiler.ImportDeclaration,
    [ts.SyntaxKind.ImportEqualsDeclaration]: compiler.ImportEqualsDeclaration,
    [ts.SyntaxKind.ImportSpecifier]: compiler.ImportSpecifier,
    [ts.SyntaxKind.IndexSignature]: compiler.IndexSignatureDeclaration,
    [ts.SyntaxKind.InterfaceDeclaration]: compiler.InterfaceDeclaration,
    [ts.SyntaxKind.IntersectionType]: compiler.IntersectionTypeNode,
    [ts.SyntaxKind.JSDocTag]: compiler.JSDocUnknownTag,
    [ts.SyntaxKind.JSDocAugmentsTag]: compiler.JSDocAugmentsTag,
    [ts.SyntaxKind.JSDocClassTag]: compiler.JSDocClassTag,
    [ts.SyntaxKind.JSDocReturnTag]: compiler.JSDocReturnTag,
    [ts.SyntaxKind.JSDocTypeTag]: compiler.JSDocTypeTag,
    [ts.SyntaxKind.JSDocTypedefTag]: compiler.JSDocTypedefTag,
    [ts.SyntaxKind.JSDocParameterTag]: compiler.JSDocParameterTag,
    [ts.SyntaxKind.JSDocPropertyTag]: compiler.JSDocPropertyTag,
    [ts.SyntaxKind.LabeledStatement]: compiler.LabeledStatement,
    [ts.SyntaxKind.LiteralType]: compiler.LiteralTypeNode,
    [ts.SyntaxKind.MetaProperty]: compiler.MetaProperty,
    [ts.SyntaxKind.MethodDeclaration]: compiler.MethodDeclaration,
    [ts.SyntaxKind.MethodSignature]: compiler.MethodSignature,
    [ts.SyntaxKind.ModuleDeclaration]: compiler.NamespaceDeclaration,
    [ts.SyntaxKind.NewExpression]: compiler.NewExpression,
    [ts.SyntaxKind.NonNullExpression]: compiler.NonNullExpression,
    [ts.SyntaxKind.NotEmittedStatement]: compiler.NotEmittedStatement,
    [ts.SyntaxKind.NoSubstitutionTemplateLiteral]: compiler.NoSubstitutionTemplateLiteral,
    [ts.SyntaxKind.NumericLiteral]: compiler.NumericLiteral,
    [ts.SyntaxKind.ObjectLiteralExpression]: compiler.ObjectLiteralExpression,
    [ts.SyntaxKind.OmittedExpression]: compiler.OmittedExpression,
    [ts.SyntaxKind.Parameter]: compiler.ParameterDeclaration,
    [ts.SyntaxKind.ParenthesizedExpression]: compiler.ParenthesizedExpression,
    [ts.SyntaxKind.PartiallyEmittedExpression]: compiler.PartiallyEmittedExpression,
    [ts.SyntaxKind.PostfixUnaryExpression]: compiler.PostfixUnaryExpression,
    [ts.SyntaxKind.PrefixUnaryExpression]: compiler.PrefixUnaryExpression,
    [ts.SyntaxKind.PropertyAccessExpression]: compiler.PropertyAccessExpression,
    [ts.SyntaxKind.PropertyAssignment]: compiler.PropertyAssignment,
    [ts.SyntaxKind.PropertyDeclaration]: compiler.PropertyDeclaration,
    [ts.SyntaxKind.PropertySignature]: compiler.PropertySignature,
    [ts.SyntaxKind.QualifiedName]: compiler.QualifiedName,
    [ts.SyntaxKind.RegularExpressionLiteral]: compiler.RegularExpressionLiteral,
    [ts.SyntaxKind.ReturnStatement]: compiler.ReturnStatement,
    [ts.SyntaxKind.SetAccessor]: compiler.SetAccessorDeclaration,
    [ts.SyntaxKind.ShorthandPropertyAssignment]: compiler.ShorthandPropertyAssignment,
    [ts.SyntaxKind.SpreadAssignment]: compiler.SpreadAssignment,
    [ts.SyntaxKind.SpreadElement]: compiler.SpreadElement,
    [ts.SyntaxKind.StringLiteral]: compiler.StringLiteral,
    [ts.SyntaxKind.SwitchStatement]: compiler.SwitchStatement,
    [ts.SyntaxKind.SyntaxList]: compiler.SyntaxList,
    [ts.SyntaxKind.TaggedTemplateExpression]: compiler.TaggedTemplateExpression,
    [ts.SyntaxKind.TemplateExpression]: compiler.TemplateExpression,
    [ts.SyntaxKind.TemplateHead]: compiler.TemplateHead,
    [ts.SyntaxKind.TemplateMiddle]: compiler.TemplateMiddle,
    [ts.SyntaxKind.TemplateSpan]: compiler.TemplateSpan,
    [ts.SyntaxKind.TemplateTail]: compiler.TemplateTail,
    [ts.SyntaxKind.ThrowStatement]: compiler.ThrowStatement,
    [ts.SyntaxKind.TryStatement]: compiler.TryStatement,
    [ts.SyntaxKind.TupleType]: compiler.TupleTypeNode,
    [ts.SyntaxKind.TypeAliasDeclaration]: compiler.TypeAliasDeclaration,
    [ts.SyntaxKind.TypeAssertionExpression]: compiler.TypeAssertion,
    [ts.SyntaxKind.TypeParameter]: compiler.TypeParameterDeclaration,
    [ts.SyntaxKind.TypeReference]: compiler.TypeReferenceNode,
    [ts.SyntaxKind.UnionType]: compiler.UnionTypeNode,
    [ts.SyntaxKind.VariableDeclaration]: compiler.VariableDeclaration,
    [ts.SyntaxKind.VariableDeclarationList]: compiler.VariableDeclarationList,
    [ts.SyntaxKind.VariableStatement]: compiler.VariableStatement,
    [ts.SyntaxKind.JSDocComment]: compiler.JSDoc,
    [ts.SyntaxKind.FirstTypeNode]: compiler.TypeNode, // todo: should be changed when implementing TypePredicateNode
    [ts.SyntaxKind.LastTypeNode]: compiler.LiteralTypeNode,
    [ts.SyntaxKind.SemicolonToken]: compiler.Node,
    [ts.SyntaxKind.TypeOfExpression]: compiler.TypeOfExpression,
    [ts.SyntaxKind.UndefinedKeyword]: compiler.Node,
    [ts.SyntaxKind.WhileStatement]: compiler.WhileStatement,
    [ts.SyntaxKind.WithStatement]: compiler.WithStatement,
    [ts.SyntaxKind.YieldExpression]: compiler.YieldExpression,
    // literals
    [ts.SyntaxKind.AnyKeyword]: compiler.Expression,
    [ts.SyntaxKind.BooleanKeyword]: compiler.Expression,
    [ts.SyntaxKind.FalseKeyword]: compiler.BooleanLiteral,
    [ts.SyntaxKind.ImportKeyword]: compiler.ImportExpression,
    [ts.SyntaxKind.NeverKeyword]: compiler.Expression,
    [ts.SyntaxKind.NullKeyword]: compiler.NullLiteral,
    [ts.SyntaxKind.NumberKeyword]: compiler.Expression,
    [ts.SyntaxKind.ObjectKeyword]: compiler.Expression,
    [ts.SyntaxKind.StringKeyword]: compiler.Expression,
    [ts.SyntaxKind.SymbolKeyword]: compiler.Expression,
    [ts.SyntaxKind.SuperKeyword]: compiler.SuperExpression,
    [ts.SyntaxKind.ThisKeyword]: compiler.ThisExpression,
    [ts.SyntaxKind.TrueKeyword]: compiler.BooleanLiteral,
    [ts.SyntaxKind.UndefinedKeyword]: compiler.Expression,
    [ts.SyntaxKind.VoidKeyword]: compiler.VoidExpression
};
