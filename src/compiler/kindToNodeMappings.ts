// DO NOT EDIT - Automatically maintained by createKindToNodeMappings.ts until conditional types have been released for a while.
import * as compiler from "../compiler";
import {SyntaxKind} from "../typescript";

export interface KindToNodeMappings {
    [kind: number]: compiler.Node;
    [SyntaxKind.SourceFile]: compiler.SourceFile;
    [SyntaxKind.ArrayLiteralExpression]: compiler.ArrayLiteralExpression;
    [SyntaxKind.ArrayType]: compiler.ArrayTypeNode;
    [SyntaxKind.ArrowFunction]: compiler.ArrowFunction;
    [SyntaxKind.AsExpression]: compiler.AsExpression;
    [SyntaxKind.AwaitExpression]: compiler.AwaitExpression;
    [SyntaxKind.BinaryExpression]: compiler.BinaryExpression;
    [SyntaxKind.Block]: compiler.Block;
    [SyntaxKind.BreakStatement]: compiler.BreakStatement;
    [SyntaxKind.CallExpression]: compiler.CallExpression;
    [SyntaxKind.CallSignature]: compiler.CallSignatureDeclaration;
    [SyntaxKind.CaseBlock]: compiler.CaseBlock;
    [SyntaxKind.CaseClause]: compiler.CaseClause;
    [SyntaxKind.CatchClause]: compiler.CatchClause;
    [SyntaxKind.ClassDeclaration]: compiler.ClassDeclaration;
    [SyntaxKind.Constructor]: compiler.ConstructorDeclaration;
    [SyntaxKind.ConstructorType]: compiler.ConstructorTypeNode;
    [SyntaxKind.ConstructSignature]: compiler.ConstructSignatureDeclaration;
    [SyntaxKind.ContinueStatement]: compiler.ContinueStatement;
    [SyntaxKind.CommaListExpression]: compiler.CommaListExpression;
    [SyntaxKind.ComputedPropertyName]: compiler.ComputedPropertyName;
    [SyntaxKind.ConditionalExpression]: compiler.ConditionalExpression;
    [SyntaxKind.DebuggerStatement]: compiler.DebuggerStatement;
    [SyntaxKind.Decorator]: compiler.Decorator;
    [SyntaxKind.DefaultClause]: compiler.DefaultClause;
    [SyntaxKind.DeleteExpression]: compiler.DeleteExpression;
    [SyntaxKind.DoStatement]: compiler.DoStatement;
    [SyntaxKind.ElementAccessExpression]: compiler.ElementAccessExpression;
    [SyntaxKind.EmptyStatement]: compiler.EmptyStatement;
    [SyntaxKind.EnumDeclaration]: compiler.EnumDeclaration;
    [SyntaxKind.EnumMember]: compiler.EnumMember;
    [SyntaxKind.ExportAssignment]: compiler.ExportAssignment;
    [SyntaxKind.ExportDeclaration]: compiler.ExportDeclaration;
    [SyntaxKind.ExportSpecifier]: compiler.ExportSpecifier;
    [SyntaxKind.ExpressionWithTypeArguments]: compiler.ExpressionWithTypeArguments;
    [SyntaxKind.ExpressionStatement]: compiler.ExpressionStatement;
    [SyntaxKind.ExternalModuleReference]: compiler.ExternalModuleReference;
    [SyntaxKind.FirstLiteralToken]: compiler.NumericLiteral;
    [SyntaxKind.NumericLiteral]: compiler.NumericLiteral;
    [SyntaxKind.FirstNode]: compiler.QualifiedName;
    [SyntaxKind.QualifiedName]: compiler.QualifiedName;
    [SyntaxKind.ForInStatement]: compiler.ForInStatement;
    [SyntaxKind.ForOfStatement]: compiler.ForOfStatement;
    [SyntaxKind.ForStatement]: compiler.ForStatement;
    [SyntaxKind.FunctionDeclaration]: compiler.FunctionDeclaration;
    [SyntaxKind.FunctionExpression]: compiler.FunctionExpression;
    [SyntaxKind.FunctionType]: compiler.FunctionTypeNode;
    [SyntaxKind.GetAccessor]: compiler.GetAccessorDeclaration;
    [SyntaxKind.HeritageClause]: compiler.HeritageClause;
    [SyntaxKind.Identifier]: compiler.Identifier;
    [SyntaxKind.IfStatement]: compiler.IfStatement;
    [SyntaxKind.ImportDeclaration]: compiler.ImportDeclaration;
    [SyntaxKind.ImportEqualsDeclaration]: compiler.ImportEqualsDeclaration;
    [SyntaxKind.ImportSpecifier]: compiler.ImportSpecifier;
    [SyntaxKind.IndexSignature]: compiler.IndexSignatureDeclaration;
    [SyntaxKind.InterfaceDeclaration]: compiler.InterfaceDeclaration;
    [SyntaxKind.IntersectionType]: compiler.IntersectionTypeNode;
    [SyntaxKind.JSDocTag]: compiler.JSDocUnknownTag;
    [SyntaxKind.JSDocAugmentsTag]: compiler.JSDocAugmentsTag;
    [SyntaxKind.JSDocClassTag]: compiler.JSDocClassTag;
    [SyntaxKind.JSDocReturnTag]: compiler.JSDocReturnTag;
    [SyntaxKind.JSDocTypeTag]: compiler.JSDocTypeTag;
    [SyntaxKind.JSDocTypedefTag]: compiler.JSDocTypedefTag;
    [SyntaxKind.JSDocParameterTag]: compiler.JSDocParameterTag;
    [SyntaxKind.JSDocPropertyTag]: compiler.JSDocPropertyTag;
    [SyntaxKind.JsxAttribute]: compiler.JsxAttribute;
    [SyntaxKind.JsxClosingElement]: compiler.JsxClosingElement;
    [SyntaxKind.JsxClosingFragment]: compiler.JsxClosingFragment;
    [SyntaxKind.JsxElement]: compiler.JsxElement;
    [SyntaxKind.JsxExpression]: compiler.JsxExpression;
    [SyntaxKind.JsxFragment]: compiler.JsxFragment;
    [SyntaxKind.JsxOpeningElement]: compiler.JsxOpeningElement;
    [SyntaxKind.JsxOpeningFragment]: compiler.JsxOpeningFragment;
    [SyntaxKind.JsxSelfClosingElement]: compiler.JsxSelfClosingElement;
    [SyntaxKind.JsxSpreadAttribute]: compiler.JsxSpreadAttribute;
    [SyntaxKind.JsxText]: compiler.JsxText;
    [SyntaxKind.LabeledStatement]: compiler.LabeledStatement;
    [SyntaxKind.LiteralType]: compiler.LiteralTypeNode;
    [SyntaxKind.LastTypeNode]: compiler.LiteralTypeNode;
    [SyntaxKind.MetaProperty]: compiler.MetaProperty;
    [SyntaxKind.MethodDeclaration]: compiler.MethodDeclaration;
    [SyntaxKind.MethodSignature]: compiler.MethodSignature;
    [SyntaxKind.ModuleDeclaration]: compiler.NamespaceDeclaration;
    [SyntaxKind.NewExpression]: compiler.NewExpression;
    [SyntaxKind.NonNullExpression]: compiler.NonNullExpression;
    [SyntaxKind.NotEmittedStatement]: compiler.NotEmittedStatement;
    [SyntaxKind.NoSubstitutionTemplateLiteral]: compiler.NoSubstitutionTemplateLiteral;
    [SyntaxKind.ObjectLiteralExpression]: compiler.ObjectLiteralExpression;
    [SyntaxKind.OmittedExpression]: compiler.OmittedExpression;
    [SyntaxKind.Parameter]: compiler.ParameterDeclaration;
    [SyntaxKind.ParenthesizedExpression]: compiler.ParenthesizedExpression;
    [SyntaxKind.PartiallyEmittedExpression]: compiler.PartiallyEmittedExpression;
    [SyntaxKind.PostfixUnaryExpression]: compiler.PostfixUnaryExpression;
    [SyntaxKind.PrefixUnaryExpression]: compiler.PrefixUnaryExpression;
    [SyntaxKind.PropertyAccessExpression]: compiler.PropertyAccessExpression;
    [SyntaxKind.PropertyAssignment]: compiler.PropertyAssignment;
    [SyntaxKind.PropertyDeclaration]: compiler.PropertyDeclaration;
    [SyntaxKind.PropertySignature]: compiler.PropertySignature;
    [SyntaxKind.RegularExpressionLiteral]: compiler.RegularExpressionLiteral;
    [SyntaxKind.ReturnStatement]: compiler.ReturnStatement;
    [SyntaxKind.SetAccessor]: compiler.SetAccessorDeclaration;
    [SyntaxKind.ShorthandPropertyAssignment]: compiler.ShorthandPropertyAssignment;
    [SyntaxKind.SpreadAssignment]: compiler.SpreadAssignment;
    [SyntaxKind.SpreadElement]: compiler.SpreadElement;
    [SyntaxKind.StringLiteral]: compiler.StringLiteral;
    [SyntaxKind.SwitchStatement]: compiler.SwitchStatement;
    [SyntaxKind.SyntaxList]: compiler.SyntaxList;
    [SyntaxKind.TaggedTemplateExpression]: compiler.TaggedTemplateExpression;
    [SyntaxKind.TemplateExpression]: compiler.TemplateExpression;
    [SyntaxKind.TemplateHead]: compiler.TemplateHead;
    [SyntaxKind.TemplateMiddle]: compiler.TemplateMiddle;
    [SyntaxKind.TemplateSpan]: compiler.TemplateSpan;
    [SyntaxKind.TemplateTail]: compiler.TemplateTail;
    [SyntaxKind.ThrowStatement]: compiler.ThrowStatement;
    [SyntaxKind.TryStatement]: compiler.TryStatement;
    [SyntaxKind.TupleType]: compiler.TupleTypeNode;
    [SyntaxKind.TypeAliasDeclaration]: compiler.TypeAliasDeclaration;
    [SyntaxKind.TypeAssertionExpression]: compiler.TypeAssertion;
    [SyntaxKind.TypeLiteral]: compiler.TypeLiteralNode;
    [SyntaxKind.TypeParameter]: compiler.TypeParameterDeclaration;
    [SyntaxKind.TypeReference]: compiler.TypeReferenceNode;
    [SyntaxKind.UnionType]: compiler.UnionTypeNode;
    [SyntaxKind.VariableDeclaration]: compiler.VariableDeclaration;
    [SyntaxKind.VariableDeclarationList]: compiler.VariableDeclarationList;
    [SyntaxKind.VariableStatement]: compiler.VariableStatement;
    [SyntaxKind.JSDocComment]: compiler.JSDoc;
    [SyntaxKind.FirstTypeNode]: compiler.TypeNode;
    [SyntaxKind.SemicolonToken]: compiler.Node;
    [SyntaxKind.TypeOfExpression]: compiler.TypeOfExpression;
    [SyntaxKind.WhileStatement]: compiler.WhileStatement;
    [SyntaxKind.WithStatement]: compiler.WithStatement;
    [SyntaxKind.YieldExpression]: compiler.YieldExpression;
    [SyntaxKind.AnyKeyword]: compiler.Expression;
    [SyntaxKind.BooleanKeyword]: compiler.Expression;
    [SyntaxKind.NeverKeyword]: compiler.Expression;
    [SyntaxKind.NumberKeyword]: compiler.Expression;
    [SyntaxKind.ObjectKeyword]: compiler.Expression;
    [SyntaxKind.StringKeyword]: compiler.Expression;
    [SyntaxKind.SymbolKeyword]: compiler.Expression;
    [SyntaxKind.UndefinedKeyword]: compiler.Expression;
    [SyntaxKind.FalseKeyword]: compiler.BooleanLiteral;
    [SyntaxKind.TrueKeyword]: compiler.BooleanLiteral;
    [SyntaxKind.ImportKeyword]: compiler.ImportExpression;
    [SyntaxKind.NullKeyword]: compiler.NullLiteral;
    [SyntaxKind.SuperKeyword]: compiler.SuperExpression;
    [SyntaxKind.ThisKeyword]: compiler.ThisExpression;
    [SyntaxKind.VoidKeyword]: compiler.VoidExpression;
}

export interface KindToExpressionMappings {
    [kind: number]: compiler.Node;
    [SyntaxKind.SourceFile]: never;
    [SyntaxKind.ArrayLiteralExpression]: compiler.ArrayLiteralExpression;
    [SyntaxKind.ArrayType]: never;
    [SyntaxKind.ArrowFunction]: compiler.ArrowFunction;
    [SyntaxKind.AsExpression]: compiler.AsExpression;
    [SyntaxKind.AwaitExpression]: compiler.AwaitExpression;
    [SyntaxKind.BinaryExpression]: compiler.BinaryExpression;
    [SyntaxKind.Block]: never;
    [SyntaxKind.BreakStatement]: never;
    [SyntaxKind.CallExpression]: compiler.CallExpression;
    [SyntaxKind.CallSignature]: never;
    [SyntaxKind.CaseBlock]: never;
    [SyntaxKind.CaseClause]: never;
    [SyntaxKind.CatchClause]: never;
    [SyntaxKind.ClassDeclaration]: never;
    [SyntaxKind.Constructor]: never;
    [SyntaxKind.ConstructorType]: never;
    [SyntaxKind.ConstructSignature]: never;
    [SyntaxKind.ContinueStatement]: never;
    [SyntaxKind.CommaListExpression]: compiler.CommaListExpression;
    [SyntaxKind.ComputedPropertyName]: never;
    [SyntaxKind.ConditionalExpression]: compiler.ConditionalExpression;
    [SyntaxKind.DebuggerStatement]: never;
    [SyntaxKind.Decorator]: never;
    [SyntaxKind.DefaultClause]: never;
    [SyntaxKind.DeleteExpression]: compiler.DeleteExpression;
    [SyntaxKind.DoStatement]: never;
    [SyntaxKind.ElementAccessExpression]: compiler.ElementAccessExpression;
    [SyntaxKind.EmptyStatement]: never;
    [SyntaxKind.EnumDeclaration]: never;
    [SyntaxKind.EnumMember]: never;
    [SyntaxKind.ExportAssignment]: never;
    [SyntaxKind.ExportDeclaration]: never;
    [SyntaxKind.ExportSpecifier]: never;
    [SyntaxKind.ExpressionWithTypeArguments]: never;
    [SyntaxKind.ExpressionStatement]: never;
    [SyntaxKind.ExternalModuleReference]: never;
    [SyntaxKind.FirstLiteralToken]: compiler.NumericLiteral;
    [SyntaxKind.NumericLiteral]: compiler.NumericLiteral;
    [SyntaxKind.FirstNode]: never;
    [SyntaxKind.QualifiedName]: never;
    [SyntaxKind.ForInStatement]: never;
    [SyntaxKind.ForOfStatement]: never;
    [SyntaxKind.ForStatement]: never;
    [SyntaxKind.FunctionDeclaration]: never;
    [SyntaxKind.FunctionExpression]: compiler.FunctionExpression;
    [SyntaxKind.FunctionType]: never;
    [SyntaxKind.GetAccessor]: never;
    [SyntaxKind.HeritageClause]: never;
    [SyntaxKind.Identifier]: compiler.Identifier;
    [SyntaxKind.IfStatement]: never;
    [SyntaxKind.ImportDeclaration]: never;
    [SyntaxKind.ImportEqualsDeclaration]: never;
    [SyntaxKind.ImportSpecifier]: never;
    [SyntaxKind.IndexSignature]: never;
    [SyntaxKind.InterfaceDeclaration]: never;
    [SyntaxKind.IntersectionType]: never;
    [SyntaxKind.JSDocTag]: never;
    [SyntaxKind.JSDocAugmentsTag]: never;
    [SyntaxKind.JSDocClassTag]: never;
    [SyntaxKind.JSDocReturnTag]: never;
    [SyntaxKind.JSDocTypeTag]: never;
    [SyntaxKind.JSDocTypedefTag]: never;
    [SyntaxKind.JSDocParameterTag]: never;
    [SyntaxKind.JSDocPropertyTag]: never;
    [SyntaxKind.JsxAttribute]: never;
    [SyntaxKind.JsxClosingElement]: never;
    [SyntaxKind.JsxClosingFragment]: compiler.JsxClosingFragment;
    [SyntaxKind.JsxElement]: compiler.JsxElement;
    [SyntaxKind.JsxExpression]: compiler.JsxExpression;
    [SyntaxKind.JsxFragment]: compiler.JsxFragment;
    [SyntaxKind.JsxOpeningElement]: compiler.JsxOpeningElement;
    [SyntaxKind.JsxOpeningFragment]: compiler.JsxOpeningFragment;
    [SyntaxKind.JsxSelfClosingElement]: compiler.JsxSelfClosingElement;
    [SyntaxKind.JsxSpreadAttribute]: never;
    [SyntaxKind.JsxText]: never;
    [SyntaxKind.LabeledStatement]: never;
    [SyntaxKind.LiteralType]: never;
    [SyntaxKind.LastTypeNode]: never;
    [SyntaxKind.MetaProperty]: compiler.MetaProperty;
    [SyntaxKind.MethodDeclaration]: never;
    [SyntaxKind.MethodSignature]: never;
    [SyntaxKind.ModuleDeclaration]: never;
    [SyntaxKind.NewExpression]: compiler.NewExpression;
    [SyntaxKind.NonNullExpression]: compiler.NonNullExpression;
    [SyntaxKind.NotEmittedStatement]: never;
    [SyntaxKind.NoSubstitutionTemplateLiteral]: compiler.NoSubstitutionTemplateLiteral;
    [SyntaxKind.ObjectLiteralExpression]: compiler.ObjectLiteralExpression;
    [SyntaxKind.OmittedExpression]: compiler.OmittedExpression;
    [SyntaxKind.Parameter]: never;
    [SyntaxKind.ParenthesizedExpression]: compiler.ParenthesizedExpression;
    [SyntaxKind.PartiallyEmittedExpression]: compiler.PartiallyEmittedExpression;
    [SyntaxKind.PostfixUnaryExpression]: compiler.PostfixUnaryExpression;
    [SyntaxKind.PrefixUnaryExpression]: compiler.PrefixUnaryExpression;
    [SyntaxKind.PropertyAccessExpression]: compiler.PropertyAccessExpression;
    [SyntaxKind.PropertyAssignment]: never;
    [SyntaxKind.PropertyDeclaration]: never;
    [SyntaxKind.PropertySignature]: never;
    [SyntaxKind.RegularExpressionLiteral]: compiler.RegularExpressionLiteral;
    [SyntaxKind.ReturnStatement]: never;
    [SyntaxKind.SetAccessor]: never;
    [SyntaxKind.ShorthandPropertyAssignment]: never;
    [SyntaxKind.SpreadAssignment]: never;
    [SyntaxKind.SpreadElement]: compiler.SpreadElement;
    [SyntaxKind.StringLiteral]: compiler.StringLiteral;
    [SyntaxKind.SwitchStatement]: never;
    [SyntaxKind.SyntaxList]: never;
    [SyntaxKind.TaggedTemplateExpression]: compiler.TaggedTemplateExpression;
    [SyntaxKind.TemplateExpression]: compiler.TemplateExpression;
    [SyntaxKind.TemplateHead]: never;
    [SyntaxKind.TemplateMiddle]: never;
    [SyntaxKind.TemplateSpan]: never;
    [SyntaxKind.TemplateTail]: never;
    [SyntaxKind.ThrowStatement]: never;
    [SyntaxKind.TryStatement]: never;
    [SyntaxKind.TupleType]: never;
    [SyntaxKind.TypeAliasDeclaration]: never;
    [SyntaxKind.TypeAssertionExpression]: compiler.TypeAssertion;
    [SyntaxKind.TypeLiteral]: never;
    [SyntaxKind.TypeParameter]: never;
    [SyntaxKind.TypeReference]: never;
    [SyntaxKind.UnionType]: never;
    [SyntaxKind.VariableDeclaration]: never;
    [SyntaxKind.VariableDeclarationList]: never;
    [SyntaxKind.VariableStatement]: never;
    [SyntaxKind.JSDocComment]: never;
    [SyntaxKind.FirstTypeNode]: never;
    [SyntaxKind.SemicolonToken]: never;
    [SyntaxKind.TypeOfExpression]: compiler.TypeOfExpression;
    [SyntaxKind.WhileStatement]: never;
    [SyntaxKind.WithStatement]: never;
    [SyntaxKind.YieldExpression]: compiler.YieldExpression;
    [SyntaxKind.AnyKeyword]: compiler.Expression;
    [SyntaxKind.BooleanKeyword]: compiler.Expression;
    [SyntaxKind.NeverKeyword]: compiler.Expression;
    [SyntaxKind.NumberKeyword]: compiler.Expression;
    [SyntaxKind.ObjectKeyword]: compiler.Expression;
    [SyntaxKind.StringKeyword]: compiler.Expression;
    [SyntaxKind.SymbolKeyword]: compiler.Expression;
    [SyntaxKind.UndefinedKeyword]: compiler.Expression;
    [SyntaxKind.FalseKeyword]: compiler.BooleanLiteral;
    [SyntaxKind.TrueKeyword]: compiler.BooleanLiteral;
    [SyntaxKind.ImportKeyword]: compiler.ImportExpression;
    [SyntaxKind.NullKeyword]: compiler.NullLiteral;
    [SyntaxKind.SuperKeyword]: compiler.SuperExpression;
    [SyntaxKind.ThisKeyword]: compiler.ThisExpression;
    [SyntaxKind.VoidKeyword]: compiler.VoidExpression;
}
